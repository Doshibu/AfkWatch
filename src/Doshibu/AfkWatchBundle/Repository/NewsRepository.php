<?php

namespace Doshibu\AfkWatchBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * NewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends EntityRepository
{
	public function findRecentsPage($media, $page, $nbPerPage, $asArray=false)
	{	
		$qb = $this->createQueryBuilder('n')
			->join('n.'.$media, 'media')
			->addSelect('media')
			->leftJoin('media.imageSmall', 'imgS')
			->addSelect('imgS')
			->leftJoin('media.imageLarge', 'imgL')
			->addSelect('imgL')
			->orderBy('n.addedAt', 'DESC')
			->getQuery();

		$qb->setFirstResult(($page-1) * $nbPerPage)
			->setMaxResults($nbPerPage);

		if($asArray === true)
		{
			$qb->setHydrationMode(Query::HYDRATE_ARRAY);
		}

		return new Paginator($qb, $fetchJoinCollection=true);
	}

	public function findMostViewed($limit=10, $asArray=false)
	{
		$qb = $this->createQueryBuilder('n')
			->orderBy('n.nbViews', 'DESC')
			//->addOrderBy('n.addedAt', 'DESC')
			->getQuery()
			->setMaxResults($limit);

		return ($asArray) ? $qb->getResult(Query::HYDRATE_ARRAY) : $qb->getResult();
	}

	public function findMostRecent($limit=10, $asArray=false)
	{
		$qb = $this->createQueryBuilder('n')
			->orderBy('n.addedAt', 'DESC')
			->getQuery()
			->setMaxResults($limit);

		return ($asArray) ? $qb->getResult(Query::HYDRATE_ARRAY) : $qb->getResult();
	}

	public function findMostViewedByGender($media, $genders, $limit=10, $asArray=false)
	{
		$qb = $this->createQueryBuilder('n')
			->join('n.'.$media, 'media')
			->addSelect('media')
			->leftJoin('media.genders', 'genres')
			->addSelect('genres');

		$i=0;
		foreach($genders as $genre)
		{
			if($i=0)
			{
				$qb->where('genres.slug = :slug')
					->setParameter('slug', $genre->getSlug());
				++$i;
			}
			else
			{
				$qb->andWhere('genres.slug = :slug')
					->setParameter('slug', $genre->getSlug());
			}
		}

		$qb = $qb->orderBy('n.nbViews', 'DESC')->getQuery()->setMaxResults($limit);
		return ($asArray) ? $qb->getResult(Query::HYDRATE_ARRAY) : $qb->getResult();
	}

	public function findMostRecentByGender($media, $genders, $limit=10, $asArray=false)
	{
		$qb = $this->createQueryBuilder('n')
			->join('n.'.$media, 'media')
			->addSelect('media')
			->leftJoin('media.genders', 'genres')
			->addSelect('genres');

		$i=0;
		foreach($genders as $genre)
		{
			if($i=0)
			{
				$qb->where('genres.slug = :slug')
					->setParameter('slug', $genre->getSlug());
				++$i;
			}
			else
			{
				$qb->andWhere('genres.slug = :slug')
					->setParameter('slug', $genre->getSlug());
			}
		}

		$qb = $qb->orderBy('n.addedAt', 'DESC')->getQuery()->setMaxResults($limit);
		return ($asArray) ? $qb->getResult(Query::HYDRATE_ARRAY) : $qb->getResult();
	}

	public function findUnique($media, $slug)
	{
		$qb = $this->createQueryBuilder('n')
			->join('n.'.$media, 'movie')
			->addSelect('movie')
			->leftJoin('movie.genders', 'genres')
			->addSelect('genres')
			->leftJoin('movie.imageSmall', 'imgS')
			->addSelect('imgS')
			->leftJoin('movie.imageLarge', 'imgL')
			->addSelect('imgL')
			->where('n.slug = :slug')
			->setParameter('slug', $slug);
		
		return $qb->getQuery()->getSingleResult();;
	}
}
